import React, { useState } from 'react';
import QueryResults from './QueryResults';

interface QueryInterfaceProps {
  profileId: string;
  profileName: string;
}

interface QueryResponse {
  answer: string;
  sources?: {
    document: string;
    page?: number;
    relevance: number;
  }[];
}

const QueryInterface: React.FC<QueryInterfaceProps> = ({ profileId, profileName }) => {
  const [query, setQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [response, setResponse] = useState<QueryResponse | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!query.trim()) {
      return;
    }
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Simulate API call to query the AI
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock response
      const mockResponse: QueryResponse = {
        answer: `This is a simulated answer to your query: "${query}". In a real implementation, this would be generated by an AI model based on the documents uploaded to the profile "${profileName}".`,
        sources: [
          {
            document: 'example-document.pdf',
            page: 12,
            relevance: 0.92
          },
          {
            document: 'support-article.csv',
            relevance: 0.78
          }
        ]
      };
      
      setResponse(mockResponse);
      setIsLoading(false);
    } catch (err) {
      setError('Failed to get a response. Please try again.');
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="p-6 bg-white rounded-lg shadow-md border border-gray-200">
        <h3 className="text-lg font-semibold mb-4">Query AI Profile: {profileName}</h3>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="query" className="block text-sm font-medium text-gray-700 mb-1">
              Your Question
            </label>
            <textarea
              id="query"
              rows={3}
              value={query}
              onChange={e => setQuery(e.target.value)}
              placeholder="Ask a question about the documents in this profile..."
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              disabled={isLoading}
            />
          </div>
          
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={isLoading || !query.trim()}
              className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-6 rounded-md transition duration-200 disabled:opacity-50"
            >
              {isLoading ? (
                <span className="flex items-center">
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Processing...
                </span>
              ) : 'Ask Question'}
            </button>
          </div>
        </form>
      </div>
      
      {response && (
        <QueryResults response={response} />
      )}
    </div>
  );
};

export default QueryInterface; 